# meta developer: @sakura_modules & @mqvon
import asyncio
import random
import logging
from telethon import events
from .. import loader

logger = logging.getLogger(__name__)

@loader.tds
class ImitatorMod(loader.Module):
    """Имитация активности в чате"""

    strings = {"name": "Imitator"}

    def __init__(self):
        self.config = loader.ModuleConfig("DELAY", 5, "Задержка между действиями")
        self._imitation_tasks = {}
        self._imitation_active = {}
        self.VALID_MODES = [
            "typing", "voice", "video", "game", "photo",
            "round", "document", "location", "contact", "mixed"
        ]

    async def _imitate(self, chat_id, mode):
        """Запускает имитацию активности"""
        while True:
            try:
                if self._imitation_active.get(chat_id, False):
                    chosen_action = random.choice(self.VALID_MODES[:-1]) if mode == "mixed" else mode
                    async with self._client.action(chat_id, chosen_action):
                        await asyncio.sleep(self.config["DELAY"])
                else:
                    break
            except Exception as e:
                logger.error(f"Ошибка имитации в чате {chat_id}: {e}")
                await asyncio.sleep(2)

    async def imcmd(self, message):
        """Запускает имитацию активности"""
        args = message.raw_text.split()
        chat_id = message.chat_id

        if len(args) < 2:
            await message.edit(f"⚡ Доступные режимы: {', '.join(self.VALID_MODES)}")
            return

        mode = args[1].lower()

        if mode not in self.VALID_MODES:
            await message.edit(f"❌ Недопустимый режим. Доступные: {', '.join(self.VALID_MODES)}")
            return

        if chat_id in self._imitation_active:
            self._imitation_active.pop(chat_id, None)
            if chat_id in self._imitation_tasks:
                self._imitation_tasks[chat_id].cancel()

        self._imitation_active[chat_id] = mode
        self._imitation_tasks[chat_id] = asyncio.create_task(self._imitate(chat_id, mode))

        await message.edit(f"✅ Имитация `{mode}` запущена!")

    async def imstopcmd(self, message):
        """Останавливает имитацию активности"""
        chat_id = message.chat_id

        if chat_id in self._imitation_active:
            self._imitation_active.pop(chat_id, None)
            if chat_id in self._imitation_tasks:
                self._imitation_tasks[chat_id].cancel()
            await message.edit("Имитация остановлена")
        else:
            await message.edit("Нет активной имитации в этом чате")
