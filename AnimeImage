# meta developer: @sakura_modules

import aiohttp
import random
import requests
from telethon.tl.types import Message
from .. import loader, utils
from aiogram.utils.exceptions import BadRequest

@loader.tds
class AnimeImageMod(loader.Module):
    """–ü–æ–∏—Å–∫–æ–≤–∏–∫ –∞–Ω–∏–º–µ –∞—Ä—Ç–æ–≤"""

    strings = {
        "name": "AnimeImage",
        "no_query": "<emoji document_id=5352703271536454445>‚ùå</emoji> –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <–∫–æ–º–∞–Ω–¥–∞> <–∑–∞–ø—Ä–æ—Å>",
        "no_results": "<emoji document_id=5352703271536454445>‚ùå</emoji> –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
        "error": "<emoji document_id=5352703271536454445>‚ùå</emoji> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
        "invalid_image": "<emoji document_id=5352703271536454445>‚ùå</emoji> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ..."
    }

    async def client_ready(self, client, db):
        self.client = client

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "FORBIDDEN_TAGS",
                "",
                "–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                validator=loader.validators.String()
            )
        )
        self.q = None
        self.api = None
        self.posts = []
        self.post = None
        self.prev = []
        self.r34_pid = 0
        self.gel_pid = 0

    def _get_forbidden_tags(self):
        return [t.strip().replace(" ", "_").lower() for t in self.config["FORBIDDEN_TAGS"].split(",") if t.strip()]

    async def _filter_forbidden_posts(self, posts):
        forbidden = self._get_forbidden_tags()
        if not posts or not forbidden:
            return posts
        return [p for p in posts if not any(t in p.get("tags", "").lower().split() for t in forbidden)]

    async def fetch_rule34_posts(self, q, pid=0):
        forbidden = " ".join(f"-{t}" for t in self._get_forbidden_tags())
        url = f"https://api.rule34.xxx/index.php?page=dapi&s=post&q=index&tags={q} {forbidden}&limit=100&pid={pid}&json=1"
        headers = {"Accept": "application/json"}
        try:
            async with aiohttp.ClientSession() as s:
                async with s.get(url, headers=headers) as r:
                    if r.status == 200:
                        data = await r.json()
                        return await self._filter_forbidden_posts(data), None
                    return [], f"–û—à–∏–±–∫–∞ API Rule34: —Å—Ç–∞—Ç—É—Å {r.status}"
        except Exception as e:
            return [], f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Rule34: {e}"

    async def fetch_gelbooru_posts(self, q, pid=0):
        forbidden = " ".join(f"-{t}" for t in self._get_forbidden_tags())
        url = f"https://gelbooru.com/index.php?page=dapi&s=post&q=index&tags={q} {forbidden}&limit=100&pid={pid}&json=1"
        headers = {"Accept": "application/json"}
        try:
            async with aiohttp.ClientSession() as s:
                async with s.get(url, headers=headers) as r:
                    if r.status == 200:
                        data = await r.json()
                        if isinstance(data, dict) and "post" in data:
                            posts = data["post"]
                            posts = await self._filter_forbidden_posts(posts)
                            random.shuffle(posts)
                            return posts, None
                        return [], "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                    return [], f"–û—à–∏–±–∫–∞ API Gelbooru: —Å—Ç–∞—Ç—É—Å {r.status}"
        except Exception as e:
            return [], f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Gelbooru: {e}"

    async def fetch_anime_post(self):
        return {"file_url": f"https://pic.re/image?random={random.randint(1, 100000)}"}

    async def fetch_nsfw_photo(self):
        url = "https://api.waifu.pics/nsfw/waifu"
        r = await utils.run_sync(requests.get, url)
        img = r.json()
        return {"file_url": img["url"]} if "error" not in img else None

    @loader.command(description="–ü–æ–∏—Å–∫ –Ω–∞ Rule34")
    async def rulecmd(self, msg: Message):
        """–ü–æ–∏—Å–∫ –Ω–∞ Rule34"""
        await msg.edit("<emoji document_id=5217592344957691550>ü§®</emoji> –ó–∞–≥—Ä—É–∂–∞—é...")
        args = utils.get_args_raw(msg)
        if not args:
            await msg.edit(self.strings["no_query"])
            return
        self.q = args
        self.api = "rule34"
        self.r34_pid = 0
        self.posts, err = await self.fetch_rule34_posts(args, pid=self.r34_pid)
        self.r34_pid += 1
        if not self.posts:
            await msg.edit(f"{self.strings['no_results']}\n{err or ''}")
            return
        self.post = self.posts.pop(0)
        self.prev = []
        await self.show_image_menu(msg, f"üíö Rule34: {self.q}")

    @loader.command(description="–ü–æ–∏—Å–∫ –Ω–∞ Gelbooru")
    async def gelboorucmd(self, msg: Message):
        """–ü–æ–∏—Å–∫ –Ω–∞ Gelbooru"""
        await msg.edit("<emoji document_id=5217592344957691550>ü§®</emoji> –ó–∞–≥—Ä—É–∂–∞—é...")
        args = utils.get_args_raw(msg)
        if not args:
            await msg.edit(self.strings["no_query"])
            return
        self.q = args
        self.api = "gelbooru"
        self.gel_pid = 0
        self.posts, err = await self.fetch_gelbooru_posts(args, pid=self.gel_pid)
        self.gel_pid += 1
        if not self.posts:
            await msg.edit(f"{self.strings['no_results']}\n{err or ''}")
            return
        self.post = self.posts.pop(0)
        self.prev = []
        await self.show_image_menu(msg, f"üí¶ Gelbooru: {self.q}")

    @loader.command(description="–ü—Ä–∏—Å–ª–∞—Ç—å —Ä–∞–Ω–¥–æ–º sfw")
    async def asfwcmd(self, msg: Message):
        """–ü—Ä–∏—Å–ª–∞—Ç—å —Ä–∞–Ω–¥–æ–º sfw"""
        await msg.edit("<emoji document_id=5217592344957691550>ü§®</emoji> –ó–∞–≥—Ä—É–∂–∞—é...")
        self.api = "animeart"
        self.post = await self.fetch_anime_post()
        self.prev = []
        await self.show_image_menu(msg, "–î–µ—Ä–∂–∏ —Å–≤–æ–π –∞—Ä—Ç–∏–∫üòä")

    @loader.command(description="–ü—Ä–∏—Å–ª–∞—Ç—å —Ä–∞–Ω–¥–æ–º nsfw")
    async def ansfwcmd(self, msg: Message):
        """–ü—Ä–∏—Å–ª–∞—Ç—å —Ä–∞–Ω–¥–æ–º nsfw"""
        await msg.edit("<emoji document_id=5217592344957691550>ü§®</emoji> –ó–∞–≥—Ä—É–∂–∞—é...")
        self.api = "ansfw"
        self.post = await self.fetch_nsfw_photo()
        if not self.post:
            await msg.edit(self.strings["error"])
            return
        self.prev = []
        await self.show_image_menu(msg, "–í–æ—Ç —Ç–≤–æ–π –∞—Ä—Ç–∏–∫...")

    async def show_image_menu(self, msg: Message, caption):
        if not self.post or "file_url" not in self.post:
            await msg.edit(self.strings["no_results"])
            return
        buttons = [
            [
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.prev_image} if self.prev else {"text": " ", "callback": None},
                {"text": "‚û°Ô∏è –î–∞–ª–µ–µ", "callback": self.next_image}
            ],
            [{"text": "üè∑Ô∏è –¢–µ–≥–∏", "callback": self.show_tags}]
        ]
        try:
            await self.inline.form(
                message=msg,
                text=caption,
                reply_markup=buttons,
                photo=self.post["file_url"]
            )
            await msg.delete()
        except BadRequest:
            await msg.edit(self.strings["invalid_image"])
            await self.next_image(msg)

    async def next_image(self, call):
        if self.post:
            self.prev.append(self.post)
        if not self.posts:
            if self.api == "rule34":
                self.posts, err = await self.fetch_rule34_posts(self.q, pid=self.r34_pid)
                self.r34_pid += 1
            elif self.api == "gelbooru":
                self.posts, err = await self.fetch_gelbooru_posts(self.q, pid=self.gel_pid)
                self.gel_pid += 1
            elif self.api == "animeart":
                self.post = await self.fetch_anime_post()
                await self.update_image_menu(call, "–î–µ—Ä–∂–∏ —Å–≤–æ–π –∞—Ä—Ç–∏–∫üòä")
                return
            elif self.api == "ansfw":
                self.post = await self.fetch_nsfw_photo()
                await self.update_image_menu(call, "–í–æ—Ç —Ç–≤–æ–π –∞—Ä—Ç–∏–∫...")
                return
            if not self.posts:
                await call.edit(text=self.strings["no_results"])
                return

        self.post = self.posts.pop(0)
        await self.update_image_menu(call, f"{self.api.capitalize()}: {self.q or 'Random'}")

    async def prev_image(self, call):
        if not self.prev:
            await call.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—Ä–æ—à–ª—ã–π –∞—Ä—Ç...")
            return
        self.posts.insert(0, self.post)
        self.post = self.prev.pop()
        await self.update_image_menu(call, f"{self.api.capitalize()}: {self.q or 'Random'}")

    async def show_tags(self, call):
        if not self.post or "tags" not in self.post:
            await call.edit(text="üè∑Ô∏è <b>–¢–µ–≥–∏:</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä—Ç–∞.")
            return
        tags = self.post["tags"].split()
        tags_formatted = ' '.join(f"<code>{t}</code>" for t in tags)
        text = f"üè∑Ô∏è <b>–¢–µ–≥–∏:</b>\n\n{tags_formatted}"
        await call.edit(
            text=text,
            reply_markup=[[{"text": "üîô –ù–∞–∑–∞–¥", "callback": self.back_to_image}]]
        )

    async def back_to_image(self, call):
        caption = f"{self.api.capitalize()}: {self.q or 'Random'}"
        await self.update_image_menu(call, caption)

    async def update_image_menu(self, call, caption):
        buttons = [
            [
                {"text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "callback": self.prev_image} if self.prev else {"text": " ", "callback": None},
                {"text": "‚û°Ô∏è –î–∞–ª–µ–µ", "callback": self.next_image}
            ],
            [{"text": "üè∑Ô∏è –¢–µ–≥–∏", "callback": self.show_tags}]
        ]
        try:
            await call.edit(
                text=caption,
                reply_markup=buttons,
                photo=self.post["file_url"]
            )
        except BadRequest:
            await call.edit(text=self.strings["invalid_image"])
            await self.next_image(call)
